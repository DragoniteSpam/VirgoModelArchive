<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>culling=false;
smoothing=true;
grid_size=0;

d3d_start();
texture_set_interpolation(false);
texture_set_repeat(true);
d3d_set_shading(smoothing);
d3d_set_culling(culling);
draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(0.25);

selected_model=-1;

model_light_direction=0;
model_rotation_z=0;
model_list_start=0;
model_distance=1;
model_lighting=false;
model_z=0;
model_animating=false;

def_tex_background=-1;
def_tex=-1;

NEW();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(view_current){
    case 0:
//        var ww=view_wview[view_current];
        var ww=640;
        var xx=0;
        
        d3d_set_projection_ortho(0, 0, view_wview[view_current], view_hview[view_current], 0);
        draw_clear(c_white);
        draw_set_color(c_black);
        draw_text(32, 32, "New");
        draw_text(32, 48, "Save");
        draw_text(32, 64, "Save (Legacy)");
        draw_text(32, 80, "Open");
        draw_line_width(32, 112, ww-32, 112, 2);
        if (mouse_within_rectangle(16, 16, ww/4, 112)){
            var n=clamp((mouse_y-32) div 16, 0, 3);
            draw_rectangle(32, 32+16*n, ww/4, 48+16*n, true);
            if (mouse_check_button_pressed(mb_left)){
                switch (n){
                    case 0:
                        NEW();
                        break;
                    case 1:
                        SAVE();
                        break;
                    case 2:
                        SAVE_LEGACY();
                        break;
                    case 3:
                        OPEN();
                        break;
                }
            }
        }
        draw_text(ww/4+32, 16, "Import Model");
        draw_text(ww/4+32, 32, "Delete Model");
        draw_text(ww/4+32, 48, "Reload Model");
        draw_text(ww/4+32, 64, "Save D3D");
        draw_text(ww/4+32, 80, "Save OBJ");
        if (mouse_within_rectangle(ww/4, 16, ww/2-32, 96)){
            var n=clamp((mouse_y-16) div 16, 0, 4);
            draw_rectangle(ww/4+32, 16+16*n, ww/2, 32+16*n, true);
            if (mouse_check_button_pressed(mb_left)){
                switch (n){
                    case 0:
                        IMPORT(instance_create(0, 0, Model));
                        break;
                    case 1:
                        DELETE();
                        break;
                    case 2:
                        if (selected_model&gt;=0){
                            var mdl=instance_find(Model, selected_model);
                            var name=mdl.name;
                            IMPORT(mdl);
                            mdl.name=name;
                        }
                        break;
                    case 3:
                        EXPORT_D3D(instance_find(Model, selected_model));
                        break;
                    case 4:
                        EXPORT_OBJ(instance_find(Model, selected_model), show_question("Convert to Blender axes?"), show_question("Swap UVs vertically?"));
                        break;
                }
            }
        }
        draw_text(ww/2+32, 16, "Load Preview Texture");
        if (mouse_within_rectangle(ww/2, 16, ww-32, 96)){
            var n=clamp((mouse_y-16) div 16, 0, 0);
            draw_rectangle(ww/2+32, 16+16*n, ww-32, 32+16*n, true);
            if (mouse_check_button_pressed(mb_left)){
                switch (n){
                    case 0:
                        PREVIEW();
                        break;
                }
            }
        }
        /////////////////////////////////////
        draw_text(32, 128, "Models ("+string(instance_number(Model))+")");
        draw_text(ww/2, 128, "Alphabetize");
        draw_rectangle(28, 124, ww/2-32, 144, true);
        draw_rectangle(ww/2-4, 124, ww-32, 144, true);
        if (mouse_within_rectangle(32, 112, ww-32, 144)){
            var n=clamp((mouse_y-128) div 16, 0, 0);
            if (mouse_check_button_pressed(mb_left)){
                switch (n){
                    case 0:
                        ALPHABETIZE();
                        break;
                }
            }
        }
        draw_rectangle(32, 160, ww-32, H-32, true);
        
        for (var n=0; true==true; n++){
            var yy=176+16*n;
            var i=n+model_list_start;
            if (yy&gt;=H-48||i==instance_number(Model)){
                break;
            }
            var current=instance_find(Model, i);
            var vertices=current.n_vertices;
            draw_text(48, yy, string(i)+". "+current.name+": "+string(vertices)+" vertices/"+string(vertices/3)+" polygons");
            if (selected_model==i){
                draw_rectangle(40, yy, ww-40, yy+16, true);
            }
            if (mouse_within_rectangle(40, yy, ww-40, yy+16)){
                if (mouse_check_button_pressed(mb_left)){
                    selected_model=i;
                } else if (mouse_check_button_pressed(mb_right)){
                    var t=selected_model;
                    selected_model=i;
                    RENAME();
                    selected_model=t;
                } else if (mouse_check_button_pressed(mb_middle)){
                    SCALE();
                }
            }
        }
        if (mouse_wheel_up()){
            model_list_start=max(0, model_list_start-1);
        } else if (mouse_wheel_down()){
            model_list_start=min(instance_number(Model)-1, model_list_start+1);
        } else if (keyboard_check_released(vk_home)){
            model_list_start=0;
        } else if (keyboard_check_released(vk_end)){
            model_list_start=instance_number(Model)-1;
        } else if (keyboard_check_released(vk_pageup)){
            model_list_start=max(0, model_list_start-10);
        } else if (keyboard_check_released(vk_pagedown)){
            model_list_start=min(instance_number(Model)-1, model_list_start+10);
        }
        
        if (model_animating){
            selected_model=(++selected_model%instance_number(Model));
        }
        /////////////////////////////////////
        ww=320;
        xx=1280;
        if (instance_number(Model)&gt;0&amp;&amp;selected_model&gt;=0){
            var m=instance_find(Model, selected_model);
            draw_text(xx+32, 32, "Rename");
            draw_text(xx+32, 48, "Scale");
            draw_text(xx+32, 64, "Untexture");
            draw_text(xx+32, 80, "Flip Texture Horizontally");
            draw_text(xx+32, 96, "Flip Texture Vertically");
            draw_text(xx+32, 112, "Toggle Animation");
            draw_text(xx+32, 128, "Toggle Lighting");
            draw_text(xx+32, 144, "Recalculate Normals (Face)");
            draw_text(xx+32, 160, "Recalculate Normals (Vertex)");
            draw_text_colour(xx+32, 176, "Recalculate All Normals (Vertex)", c_red, c_red, c_red, c_red, 1);
            draw_text_colour(xx+32, 192, "Ruin Normals", c_red, c_red, c_red, c_red, 1);
            draw_text(xx+32, 208, "Toggle Backface Culling");
            draw_text(xx+32, 224, "Toggle Smooth Shading");
            draw_text(xx+32, 240, "Convert Y+Up to Z+Up");
            draw_text(xx+32, 256, "Colorize Vertices");
            draw_text(xx+32, 272, "-----------------------------");
            draw_text_colour(xx+32, 288, "Grid size: "+string(grid_size), c_blue, c_blue, c_blue, c_blue, 1);
            var c=c_black;
            if (grid_size==0){
                c=c_gray;
            }
            draw_text_colour(xx+32, 304, "    xmin: "+string(m.xmin), c, c, c, c, 1);
            draw_text_colour(xx+32, 320, "    ymin: "+string(m.ymin), c, c, c, c, 1);
            draw_text_colour(xx+32, 336, "    zmin: "+string(m.zmin), c, c, c, c, 1);
            draw_text_colour(xx+32, 352, "    xmax: "+string(m.xmax), c, c, c, c, 1);
            draw_text_colour(xx+32, 368, "    ymax: "+string(m.ymax), c, c, c, c, 1);
            draw_text_colour(xx+32, 384, "    zmax: "+string(m.zmax), c, c, c, c, 1);
            draw_text_colour(xx+32, 400, "  Auto-calculate bounds", c, c, c, c, 1);
            if (mouse_within_rectangle(xx+32, 16, xx+ww-32, H-16)){
                var n=clamp((mouse_y-32) div 16, 0, 24);
                draw_rectangle(xx+32, 32+16*n, xx+ww-32, 48+16*n, true);
                if (mouse_check_button_pressed(mb_left)){
                    switch (n){
                        case 0:
                            RENAME();
                            break;
                        case 1:
                            SCALE();
                            break;
                        case 2:
                            STRIP_TEXTURE();
                            break;
                        case 3:
                            FLIP_TEXTURE_HORIZONTAL();
                            break;
                        case 4:
                            FLIP_TEXTURE_VERTICAL();
                            break;
                        case 5:
                            model_animating=!model_animating;
                            break;
                        case 6:
                            model_lighting=!model_lighting;
                            break;
                        case 7:
                            NORMALS();
                            break;
                        case 8:
                            SMOOTH(45);
                            break;
                        case 9:
                            SMOOTH_ALL(45);
                            break;
                        case 10:
                            NORMALS_RUIN();
                            break;
                        case 11:
                            culling=!culling;
                            d3d_set_culling(culling);
                            break;
                        case 12:
                            smoothing=!smoothing;
                            d3d_set_shading(smoothing);
                            break;
                        case 13:
                            Y_UP_TO_Z_UP();
                            break;
                        case 14:
                            COLORIZE();
                            break;
                        case 15:
                            break;
                        case 16:
                            grid_size=get_ubyte("Size of the grid to measure the meshes by? (Will not be saved as Legacy, or if the size is zero. Only use if the destination game is grid-based.", grid_size);
                            break;
                        case 17:
                            m.xmin=get_byte("xmin of "+m.name+"?", m.xmin);
                            break;
                        case 18:
                            m.ymin=get_byte("ymin of "+m.name+"?", m.ymin);
                            break;
                        case 19:
                            m.zmin=get_byte("zmin of "+m.name+"?", m.zmin);
                            break;
                        case 20:
                            m.xmax=get_byte("xmax of "+m.name+"?", m.xmax);
                            break;
                        case 21:
                            m.ymax=get_byte("ymax of "+m.name+"?", m.ymax);
                            break;
                        case 22:
                            m.zmax=get_byte("zmax of "+m.name+"?", m.zmax);
                            break;
                        case 23:
                            AUTO_BOUNDS();
                            break;
                    }
                }
            }
        }
        break;
    case 1:
        var md=1-model_distance;
        d3d_set_projection(room_width/2*md, room_height/2*md, 256*(1-md), room_width, room_height, 0, 0, 0, 1);
        
        draw_set_color(c_white);
        d3d_draw_floor(0, room_height, 0, room_width, 0, 0, background_get_texture(b_grass), room_width/32, room_height/32);
        if (selected_model&gt;=0){
            var sm=instance_find(Model, selected_model);
            d3d_set_lighting(model_lighting);
            d3d_light_enable(0, true);
            d3d_light_define_direction(0, dcos(model_light_direction), -dsin(model_light_direction), -0.25, c_white);
            
            d3d_transform_set_rotation_z(model_rotation_z);
            d3d_transform_add_translation(room_width/2, room_height/2, model_z);
            d3d_model_draw(sm.model, 0, 0, 0, def_tex);
            if (point_distance_3d(sm.xmin, sm.ymin, sm.zmin, sm.xmax, sm.ymax, sm.zmax)&gt;0){
                d3d_model_cage(sm);
            }
            d3d_transform_set_identity();
            
            d3d_set_lighting(false);
            if (keyboard_check_direct(ord('A'))){
                model_rotation_z++;
            } else if (keyboard_check_direct(ord('D'))){
                model_rotation_z--;
            } else if (keyboard_check_direct(ord('W'))){
                model_distance=max(0.05, model_distance-0.01);
            } else if (keyboard_check_direct(ord('S'))){
                model_distance=min(20, model_distance+0.01);
            } else if (keyboard_check_direct(vk_left)){
                model_light_direction++
            } else if (keyboard_check_direct(vk_right)){
                model_light_direction--;
            } else if (keyboard_check_pressed(vk_space)){
                model_lighting=!model_lighting;
            } else if (keyboard_check_direct(vk_up)){
                model_z++;
            } else if (keyboard_check_direct(vk_down)){
                model_z--;
            } else if (keyboard_check_pressed(vk_enter)){
                model_animating=!model_animating;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
